<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>language on Org Mode</title>
    <link>https://kylestones.github.io/categories/language/</link>
    <description>Recent content in language on Org Mode</description>
    <image>
      <url>https://kylestones.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kylestones.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://kylestones.github.io/categories/language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>shell</title>
      <link>https://kylestones.github.io/blog/apue/shell/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/apue/shell/</guid>
      <description>ssh 隧道 top vmstat iostat ps tar grep sort # -u 重复关键字只保留第一个 # -k 知道排序字段（开始,结束）和类型，可通过 info sort 具体查看 # 2n,2 表示安装第二个字段，以数字顺序排序。默认安装字段顺序 # 1rn,1 表示按照数字逆序排序 sort -u -k 2n,2 file | sort -k 1rn,1 -k 3,3 sed sed 全名叫 stream editor，流编辑器（非交互）。sed 基本上就是玩正则模式 匹配。sed 比 awk 大 2-3 岁。
基本语法 $ sed options file # 并不修改文件，只将处理的结果打印出来 $ sed -e &amp;#39;s/hello/Hello/g&amp;#39; filename # 使用 -i 将直接修改文件 $ sed -i &amp;#39;s/^/# /g&amp;#39; filename # 同时处理多条语句 $ sed -e &amp;#39;2,5s/hello/Hello/; s/world/(&amp;amp;)/g&amp;#39; filename $ sed -e &amp;#39;1,3s/hello/Hello/3&amp;#39; -e &amp;#39;3,$s/world/World/3g&amp;#39; filename # 读取 sed 脚本处理文件 $ more rep.</description>
    </item>
    
    <item>
      <title>python</title>
      <link>https://kylestones.github.io/blog/machinelearning/python/</link>
      <pubDate>Wed, 31 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/machinelearning/python/</guid>
      <description>Python 常识
调试 logging logging.debug ，不要再胡乱使用 print 了
use pdb 在Python 文件内 import pdb ，然后在需要调试的开始行添加 pdb.set_trace() shell 中 python -m pdb test.py pdb.run() 使用 args 查看入参，没有查看局部变量的方法
axis axis = 0 表示第一维数据，axis = -1 表示最后一维数据；就是 np.array(.).shape 输出的顺序
数组索引 Python 可以使用数组作为数组的索引 # 生成数组 # 切片可以指定 start:stop:step , a[::-1] 可以将数组逆序 &amp;gt;&amp;gt;&amp;gt; import numpy as np &amp;gt;&amp;gt;&amp;gt; np.arange(5) array([0, 1, 2, 3, 4]) # 增加一个维度 &amp;gt;&amp;gt;&amp;gt; a array([[0, 1], [0, 1]]) # 将 -1 维度的每一个值都变成一个新的数组（每个数组中只包含一个值） &amp;gt;&amp;gt;&amp;gt; a[:,:,np.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;</title>
      <link>https://kylestones.github.io/blog/apue/cpp/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/apue/cpp/</guid>
      <description>头文件 #include &amp;lt;cctype&amp;gt; // C++ 头文件，开头的 C 表明来自 C 语言，但更符合 C++ 规范 #include &amp;lt;ctype.h&amp;gt; // C 语言头文件；不应该在 C++ 中使用 // 为啥 C++ 的头文件名都没有 .h 后缀呀？ // IO 库 #include &amp;lt;iostream&amp;gt; // 容器 #include &amp;lt;vector&amp;gt; #include &amp;lt;list&amp;gt; #include &amp;lt;deque&amp;gt; #include &amp;lt;bitset&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;priority_queue&amp;gt; 命名空间 namespace kyle { // 嵌套命名空间 namespace sanshi { ... } } // 命名空间重命名 作用域 scope 全局作用域：定义在所有函数外部 局部作用域：定义在函数内部 语句作用域：for 循环中，C 语言中不可以在 for 循环语句中定义变量 局部变量 hide 全局变量。</description>
    </item>
    
    <item>
      <title>Funny of C</title>
      <link>https://kylestones.github.io/blog/apue/fun-of-c/</link>
      <pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/apue/fun-of-c/</guid>
      <description>变量 所谓变量，其实是内存地址的一个抽像名字罢了;;
在静态编译的程序中，所有的变量名都会在编译时被转成内存地址。机器是不知道我们取的名字的，只知道地址。
不管结构体的实例是什么– 访问其成员其实就是加成员的偏移量。
宏定义 C 语言的宏实现对组成程序的字符进行变换的方式。宏既可以使一段看上去完全不合语法的代码成为一个有效的 C 程序，也能使一段看上去无害的代码成为一个可怕的怪物。比如可以阅读陈皓的 《6 个变态的 C 语言 Hello World 程序》
#define tString(x) #x // 传入参数两侧加上双引号&amp;#34; 。如果入参是变量，其定义必须在宏定义之前 #define toChar(x) #@x // 将参数两侧加上单引号&amp;#39; ， #define conn(x,y) x##y // 连接两个参数 字符串 数组 C 语言中只有一维数组，而且数组的大小必须在编译期就作为常数确定下来。但数组中的元素可以是任何类型 的对象，当然也就可以是另外一个数组 对一个数组只能做两件事：确定数组的大小；获得指向数组下标为 0 的元素的指针。 任何一个数组下标运算都等同于一个对应的指针运算。
对于数组 char s[10]来说，数组名 s 和 &amp;amp;s 都是一样的。
int a[10]; int i = 3; *a = 84; *(a+i) = 22; a[i] = 21; /* 表达式 *(a+i) 即数组 a 中下标为 i 的元素的引用；由于比较常用，所以被简记成 a[i] ； * 又由于 a+i 与 i+a 含义相同，因此 *(a+i) 与 *(i+a) 含义相同，所以 a[i] 与 i[a] 含义相同 */ i[a] = 12; //虽然如此，但强烈不建议这么写 数组的原地就是内容，长度为 0 的数组其并不占据内存。</description>
    </item>
    
    <item>
      <title>C Traps and Pitfalls</title>
      <link>https://kylestones.github.io/blog/apue/c-traps-and-pitfalls/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/apue/c-traps-and-pitfalls/</guid>
      <description>导读 程序严格按照我们写明的程序来执行，但结果却并不是我们真正希望得到的。 程序设计错误实际上反应的是程序与程序员的“心智模式”两者的相异之处。（心智模式(mental model)解释为人 们深植心中，对于周遭世界如何运作的看法和行为；《列子》中记录有疑邻盗斧）
练习 0-1 返修率高 你是否愿意购买一个返修率很高的厂商所生产的汽车？如果厂家声明它已经做出了改进，你的态度是否会改变？用 户为你找出程序中的 Bug，你真正损失的是什么？
答：我们经常会依据厂商的信誉去购买其商品；会考虑其最近的高质量是真实的还是偶然的；会损失信誉。而信誉 一旦失去，就很难重新获得。
0-2 修建一个 100 英尺长的护栏，护栏的栏杆之间相距 10 英尺，共需要多少根栏杆？ 答：11 根。
0-3 菜刀 在烹饪时你是否失手用菜刀切伤过自己的手？怎样改进菜刀使得使用更安全？你是否愿意使用这样一把经过改良的 菜刀？
答：我们很容易想到办法让一个工具更安全，代价是原来简单的工具现在要变得复杂一些。食品加工机一般有连锁 装置，保护使用者不让手指受伤。但是菜刀却不同，给这样一个简单、灵活的工具附加保护手指避免受伤的装置， 只能让其失去简单灵活的特点。实际上，这样做最后得到的也许更像一台食品加工机，而不是一把菜刀。 使其难于做“傻事”常常会使其难于做“聪明事”，正所谓“弄巧成拙”。
第 1 章 词法陷阱 从较低层面考虑，程序是由 符号(token) 序列组成的，将程序分解成符号的过程称为“词法分析” 术语符号指的是程序的一个基本组成单元，其作用相当于一个句子中的单词，在不同的句子中用于相同的意义；但 是组成符号的字符序列就不同，同一组字符序列在某个上下文环境中属于一个符号，而在另一个上下文环境中可能 属于完全不同的另一个符号。 编译器中负责将程序分解为一个一个符号的部分称为“词法分析器” 在 C 语言中，符号之间的空白（包括空格符、制表符或换行符）将被忽略，因此 C 语言书写的格式可以很随意， 但这并不是好习惯。
1.1 = is not == C 语言中赋值符号被作为一种操作符对待，因而重复进行赋值操作可以很容易的书写(a=b=c) 不要误用比较运算和赋值运算 比较运算时，如果有常量，将常量方在左侧 如果确实需要赋值运算，明确的表示出来，如下： if(x = y) foo(); //应写成 if (0 != (x = y)) foo(); 不要指望靠编译器来提醒这些警告消息，毕竟警告可以被忽略，而且有些编译器不支持 1.</description>
    </item>
    
  </channel>
</rss>
