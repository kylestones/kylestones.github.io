<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Git on Org Mode</title>
    <link>https://kylestones.github.io/categories/git/</link>
    <description>Recent content in Git on Org Mode</description>
    <image>
      <url>https://kylestones.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kylestones.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://kylestones.github.io/categories/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git</title>
      <link>https://kylestones.github.io/blog/tools/git/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/tools/git/</guid>
      <description>简介 Git 是用 C 语言开发的分布式版本控制系统。
Git 保存的不是文件差异或者变化量，而只是一系列文件快照。而其他系统在每个版本中记录着各个文件的具体差 异。Git 并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件 系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索 引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。
在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次 提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针。
Git 中的绝大多数操作都只需要访问本地文件和资源，不用连网。
保存到 Git 之前，所有数据都要进行内容的校验和（checksum）计算，并将此结果作为数据的唯一标识和索引。 这项特性作为 Git 的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致 文件数据缺失，Git 都能立即察觉。Git 使用 SHA-1 算法计算数据的校验和，通过对文件的内容或目录的结构计 算出一个 SHA-1 哈希值，作为指纹字符串。该字串由 40 个十六进制字符组成。Git 的工作完全依赖于这类指纹 字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的， 而不是靠文件名。
对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）
安装 $ apt-get install git 配置 命令 git config 专门用来配置或读取相应的工作环境变量，这些环境变量决定了 git 在各个环节的具体工作方 式和行为，存在在三个地方：
/etc/gitconfig 文件：系统中所有用户都普遍适用的配置；使用 git config 时用–system 选项，读写的就 是这个文件 ~/.gitconfig 文件：只适用该用户，使用 –global 选项时读写该文件；一般我们只配置该文件 .git/config 文件：进对该项目有效。每一级别的配置都会覆盖上层的相同配置 首先需要配置用户名称和电子邮件地址，这两条配置很重要，每次提交的时候都会随更新一起被纳入历史记录</description>
    </item>
    
  </channel>
</rss>
