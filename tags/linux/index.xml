<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux, on Org Mode</title>
    <link>https://kylestones.github.io/tags/linux/</link>
    <description>Recent content in Linux, on Org Mode</description>
    <image>
      <url>https://kylestones.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kylestones.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://kylestones.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Computer Systems - A Programmer&#39;s Perspective</title>
      <link>https://kylestones.github.io/blog/apue/csapp/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/apue/csapp/</guid>
      <description>局部性 局部性良好的代码速度会大大提高
分为时间局部性和空间局部性；时间局部性表明一个变量在不远的将来会再次被访问；空间局部性表明一个变量周围的变量很快会被访问。
代码提升的关键在于充分利用高速缓存 cache (CPU 和主存读写速度之间的差距在不断增大）
程序的机器级表示 汇编代码以及机器码都不包含任何变量名字以及类型信息 。程序就仅仅是一些数字序列而已。
在代码中假如汇编的方法：
函数使用汇编代码实现，然后链接的回收使用 使用 GCC 提供的选项，直接在 C 函数中插入汇编代码 x86-64 16 个通用寄存器 Instruction pointer %rip Stack pointer %rsp Return value %rax Arguments passed in registers %rdi, %rsi, %rdx, %rcx, %r8, %r9 Callee-saved %rbx, %r12, %r13, %r14, %rbp, %rsp Caller-saved %rdi, %rsi, %rdx, %rcx, %r8, %r9, %rax, %r10, %r11 x86-64 惯例，操作 32 位寄存器，会将该寄存器的高 32 位设置为 0 。
栈 栈的地址向下增长，即每次压栈都会导致寄存器 %rsp 的值减小。大多数函数都需要栈帧（栈上的一段内存）来保存信息，栈帧的结构从 栈底到栈顶依次为 保存的 callee-saved 寄存器的值 局部变量 调用其他函数需要的 6 个参数寄存器以外的内存 返回地址 程序使用栈完成函数调用，此时主要由寄存器 %rip 以及 %rsp 完成</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://kylestones.github.io/blog/tools/git/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/tools/git/</guid>
      <description>简介 Git 是用 C 语言开发的分布式版本控制系统。
Git 保存的不是文件差异或者变化量，而只是一系列文件快照。而其他系统在每个版本中记录着各个文件的具体差 异。Git 并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件 系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索 引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。
在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次 提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针。
Git 中的绝大多数操作都只需要访问本地文件和资源，不用连网。
保存到 Git 之前，所有数据都要进行内容的校验和（checksum）计算，并将此结果作为数据的唯一标识和索引。 这项特性作为 Git 的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致 文件数据缺失，Git 都能立即察觉。Git 使用 SHA-1 算法计算数据的校验和，通过对文件的内容或目录的结构计 算出一个 SHA-1 哈希值，作为指纹字符串。该字串由 40 个十六进制字符组成。Git 的工作完全依赖于这类指纹 字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的， 而不是靠文件名。
对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）
安装 $ apt-get install git 配置 命令 git config 专门用来配置或读取相应的工作环境变量，这些环境变量决定了 git 在各个环节的具体工作方 式和行为，存在在三个地方：
/etc/gitconfig 文件：系统中所有用户都普遍适用的配置；使用 git config 时用–system 选项，读写的就 是这个文件 ~/.gitconfig 文件：只适用该用户，使用 –global 选项时读写该文件；一般我们只配置该文件 .git/config 文件：进对该项目有效。每一级别的配置都会覆盖上层的相同配置 首先需要配置用户名称和电子邮件地址，这两条配置很重要，每次提交的时候都会随更新一起被纳入历史记录</description>
    </item>
    
    <item>
      <title>GNU Compiler Collection</title>
      <link>https://kylestones.github.io/blog/tools/gcc/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/tools/gcc/</guid>
      <description>GCC 由最初的 GNU C Compiler 逐渐演变为 GNU Compiler Collection ，支持 C, C++, Objective-C, Fortran, Ada, Go 语言的编译，当然也包含这些语言的库。不同的语言会有不同的版本， gcc 是 c 语言的编译器。
编译 编译过程通常包含 4 个步骤，可以指定选项来只完成某一步操作：
预处理或预编译 (Preprocessing)，进行宏替换、注释消除、找到库文件 : gcc -E test.c -o test.i 编译 (Compilation) ，编译成汇编代码 : gcc -S test.i -o test.s 汇编 (Assembly) ，生成机器代码（目标代码）: gcc -c test.s -o test.o 连接 (Linking) ，将目标文件和库文件连接起来，生成可执行文件 : gcc test.o -o test # 没有连接选项 多文件编译 # 方法一 gcc test1.c test2.c -o test # 方法二 gcc test1.</description>
    </item>
    
    <item>
      <title>GNU Project Debugger</title>
      <link>https://kylestones.github.io/blog/tools/gdb/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/tools/gdb/</guid>
      <description>GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具。
GDB主要帮忙你完成下面四个方面的功能：
启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。 可让被调试的程序在你所指定的调置的断点处停住。 当程序被停住时，可以检查此时你的程序中所发生的事。 动态的改变你程序的执行环境。 预置条件：在编译连接的时候要指定 -g 选项，把调试信息加入到可执行文件。
启动 $ gdb program $ gdb --args program arg1 arg2 ... # 带着执行参数挂载 gdb $ gdb # 先进入 gdb 界面 (gdb) file program $ gdb program core # $ gdb program PID # 程序运行之后再挂载 $ gdb attach PID # attach 帮助 (gdb) help # 列出命令的所有种类 (gdb) help &amp;lt;class&amp;gt; # 查看该类的所有命令 (gdb) helo &amp;lt;command&amp;gt; # 查看该命令的帮助信息 在输入命令名称不完整的时候，gdb 可以自动配置命令，然后执行匹配到没有歧义的命令。若有歧义则提示用户输 入更多信息来批备命令。直接回车将执行上一次执行的命令。
查看源代码 (gdb) list # 查看程序代码，简写 l (gdb) l (gdb) list &amp;lt;first&amp;gt;, &amp;lt;last&amp;gt; # 显示从first行到last行之间的源代码 (gdb) show listsize # 查看 (gdb) set listsize 20 # 修改 (gdb) forward-search &amp;lt;regexp&amp;gt; # 向前搜索源代码；regexp 是正则表达式 (gdb) search &amp;lt;regexp&amp;gt; (gdb) reverse-search &amp;lt;regexp&amp;gt; # 向后搜索源代码 (gdb) info line # 查看源代码在内存中的地址 (gdb) disassemble func # 查看源程序的当前执行时的机器码，这个命令会把目前内存中的指令 dump 出来 程序运行上下文 (gdb) set args arg1 # 这里指可以设置运行参数，不能加程序名 (gdb) show args (gdb) path &amp;lt;dir&amp;gt; # 设定程序运行路径 (gdb) show path # 查看程序运行路径 (gdb) cd /root # (gdb) pwd (gdb) set environment USER=sanshi # 设置环境变量 (gdb) show environment (gdb) info terminal # 显示程序用到的终端模式 (gdb) run &amp;gt; outfile # 重定向程序输出 (gdb) tty /dev/tty1 # 设置输入输出使用的终端设备 (gdb) set logging on # 将命令的输出保存到默认的 gdb.</description>
    </item>
    
    <item>
      <title>make</title>
      <link>https://kylestones.github.io/blog/tools/make/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/tools/make/</guid>
      <description>make 可以自行决定一个大型程序中的哪些源文件需要重新编译，并根据指定的命令对其进行重新编译。make 不仅 可以用于 C 语言的编译，其可以用于任何可以使用 shell 命令进行编译的语言。而且 make 并不仅仅限于编译某 种语言，也可以使用 make 工具来做一些其它的事。例如，有这样的需求：当我们修改了某个或者某些文件后，需 要能够根据修改的文件来自动对相关文件进行重建或者更新。
需要编写 makefile 文件来使用 make 这个工具。makefile 用于告诉 make 需要编译哪些文件，以及如何编译。 makefile 文件中描述了文件之间的关系，并制定了一些命令用于编译更新。一般来说，一个可执行程序文件依赖 一些目标文件，而这些目标文件有某些源文件编译得到。一旦完成了一个有效的 makefile 文件，每次只需要执行 make 命令便可以完成增量编译。make 根据文件的最后修改时间来决定哪些文件需要被更新。
edit : main.o kbd.o command.o display.o \ insert.o search.o files.o utils.o cc -o edit main.o kbd.o command.o display.o \ insert.o search.o files.o utils.o main.o : main.c defs.h cc -c main.c kbd.o : kbd.c defs.h command.h cc -c kbd.c command.o : command.</description>
    </item>
    
    <item>
      <title>mpayer</title>
      <link>https://kylestones.github.io/blog/tools/mplayer/</link>
      <pubDate>Wed, 24 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/tools/mplayer/</guid>
      <description>拷贝路径 mplayer 参数说明
格式有点凌乱，待整理。 TODO
MPlayer 名称 概要 说明 一般注记 播放选项 ( 仅用于 MPLAYER) 分路器 / 媒体流选项 OSD/ 字幕选项 音频输出选项 ( 仅用于 MPLAYER) 视频输出选项 ( 仅用于 MPLAYER) 解码 / 滤镜选项 编码选项 ( 仅用于 MENCODER) 键盘控制 SLAVE 模式协议 文件 示例 BUGS 作者 标准声明 名称 mplayer − Linux下的电影播放器 mencoder − Linux下的电影编码器 概要 mplayer [选项] [ 文件 | URL | 播放列表 | - ] mplayer [全局选项] 文件1 [特定选项] [文件2] [特定选项] mplayer [全局选项] {一组文件和选项} [针对该组的特定选项] mplayer [dvd|vcd|cdda|cddb|tv]://title [选项] mplayer [mms[t]|http|http_proxy|rt[s]p]:// [用户名:密码@]URL[:端口] [选 项] mencoder [选项] [ 文件 | URL | - ] [−o 输出文件] gmplayer [选项] [−skin skin] 说明 mplayer 是一个LINUX下的电影播放器, (也能运行在许多其它的Unices 和 非x86 的CPU 上, 参看文档).</description>
    </item>
    
    <item>
      <title>Unix Network Programming</title>
      <link>https://kylestones.github.io/blog/apue/unp/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/apue/unp/</guid>
      <description>问题 程序异常终止 此时所有打开的文件描述符将被关闭，TCP 连接发送一个 FIN 。然后呢？对端的确认报文是否收到无所谓？ 对端发送 FIN 报文，此时已经终止？无法恢复确认报文？对端会重复发送？
IP 分片(fragment) – TCP 分段 MTU : 最大传输单元 链路层对网络数据帧的一个限制：以太网限制 MTU 为 1500 字节。 尽管 IP 报文头中有 16 位表示数据报的长度（最大长度 2^16-1=65535） IP 报文的长度超过 MTU 就需要分片，IP 数据报的分片与重组都是在网络层完成的。 IP 头有 3 个标志位，一个标志位保留；一个标志位 DF 表示是否允许分片，为 0 表示允许分片，为 1 表示禁止 分片，当报文长度大于 MTU 则丢弃该报文，并向源主机发送 ICMP 报文；一个标志位 MF 表示之后是否还有分片 片偏移用于确定该片偏移原始数据报开始处的位置。 16 位标识用于确定相应的片是否属于同一个 IP 报文。 每个以太帧长度在 64 bytes ~ 1518 bytes，减去以太网帧头（DMAC 48bits=6Bytes + SMAC 48bits=6Bytes + Type 2Bytes + CRC 4Bytes）最大只能有 1500 bytes。链路层数据部分长度的要求是 46bytes ~ 1500bytes</description>
    </item>
    
    <item>
      <title>Advanced Programming in the UNIX Environment</title>
      <link>https://kylestones.github.io/blog/apue/apue/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/apue/apue/</guid>
      <description>I/O 文件 I/O 通过文件描述符标识。对于内核而言，所有打开文件都通过文件描述符引用。 其也是有缓冲的，只是其缓冲区在内核空间，不再用户空间。体现在延迟写，只在适当的时候才调用写文件操作， 减少不必要的写操作，增加性能。 函数 open() 打开文件时，指定模式必须有且仅有 O _RDONLY / O _WRONLY / O _RDWR 三者中的一个。 选项 O _APPEND 指定为追加。原来的 UNIX 系统不支持追加，只能先使用 lseek() 先设置文件的偏移量到文件的 结尾，然后再写。但是这在多个进程同时写的时候会出问题，因为调用了两个函数来追加，所以不是一个原子操作。 而追加选项确保设置偏移和写操作为原子操作。
管道读写 写管道的时候不用使用追加选项，内核会自动按写的顺序写入管道。读取后自动将相应的内容从管道清除。 读取一个写端关闭的管道，在读取完全部数据后，read 函数返回 0 ； 写一个读端关闭的管道，产生 SIGPIPE 信号，设置该信号处理函数或者忽略该信号，write 返回 -1，且 errno 设置为 EPIPE。 读管道，如果管道为空，调用线程阻塞，同进程内的其他线程不受影响。
套接字描述符 虽然套接字描述符本质上是一个文件描述符，但不是所有参数为文件描述符的函数都可以接受套接字描述符。 套接字不支持文件偏移量概念，不能使用 lseek 函数，也不可以使用 mmap 函数，不可调用 fchdir 函数。
shutdown 函数可以直接关闭一个套接字的读端或者写端，不管该套接字描述符复制了多少分； close 函数只有在关闭最后一个套接字的时候才会释放该套接字。
改变文件偏移量 lseek
标准库 I/O 标准 I/O 库的操作围绕流(stream)进行。利用指向 FILE 对象维护，该结构体包含了标准 I/O 库为了维护该流所 需要的信息：文件描述符，指向缓冲区的指针，缓冲区的长度，缓冲区中当前的字符数，出错标志等。不需要关心 FILE 结构的具体形式。 相对于文件 I/O，标准库的 I/O 都是带缓冲的，标准库维护了一个缓冲区，在适当的时候才调用 read、write 函 数，从而减少系统调用的开销。</description>
    </item>
    
  </channel>
</rss>
