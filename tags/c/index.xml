<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C on Org Mode</title>
    <link>https://kylestones.github.io/tags/c/</link>
    <description>Recent content in C on Org Mode</description>
    <image>
      <url>https://kylestones.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kylestones.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://kylestones.github.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Funny of C</title>
      <link>https://kylestones.github.io/blog/apue/fun-of-c/</link>
      <pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/apue/fun-of-c/</guid>
      <description>变量 所谓变量，其实是内存地址的一个抽像名字罢了;;
在静态编译的程序中，所有的变量名都会在编译时被转成内存地址。机器是不知道我们取的名字的，只知道地址。
不管结构体的实例是什么– 访问其成员其实就是加成员的偏移量。
宏定义 C 语言的宏实现对组成程序的字符进行变换的方式。宏既可以使一段看上去完全不合语法的代码成为一个有效的 C 程序，也能使一段看上去无害的代码成为一个可怕的怪物。比如可以阅读陈皓的 《6 个变态的 C 语言 Hello World 程序》
#define tString(x) #x // 传入参数两侧加上双引号&amp;#34; 。如果入参是变量，其定义必须在宏定义之前 #define toChar(x) #@x // 将参数两侧加上单引号&amp;#39; ， #define conn(x,y) x##y // 连接两个参数 字符串 数组 C 语言中只有一维数组，而且数组的大小必须在编译期就作为常数确定下来。但数组中的元素可以是任何类型 的对象，当然也就可以是另外一个数组 对一个数组只能做两件事：确定数组的大小；获得指向数组下标为 0 的元素的指针。 任何一个数组下标运算都等同于一个对应的指针运算。
对于数组 char s[10]来说，数组名 s 和 &amp;amp;s 都是一样的。
int a[10]; int i = 3; *a = 84; *(a+i) = 22; a[i] = 21; /* 表达式 *(a+i) 即数组 a 中下标为 i 的元素的引用；由于比较常用，所以被简记成 a[i] ； * 又由于 a+i 与 i+a 含义相同，因此 *(a+i) 与 *(i+a) 含义相同，所以 a[i] 与 i[a] 含义相同 */ i[a] = 12; //虽然如此，但强烈不建议这么写 数组的原地就是内容，长度为 0 的数组其并不占据内存。</description>
    </item>
    
    <item>
      <title>Advanced Programming in the UNIX Environment</title>
      <link>https://kylestones.github.io/blog/apue/apue/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/apue/apue/</guid>
      <description>I/O 文件 I/O 通过文件描述符标识。对于内核而言，所有打开文件都通过文件描述符引用。 其也是有缓冲的，只是其缓冲区在内核空间，不再用户空间。体现在延迟写，只在适当的时候才调用写文件操作， 减少不必要的写操作，增加性能。 函数 open() 打开文件时，指定模式必须有且仅有 O _RDONLY / O _WRONLY / O _RDWR 三者中的一个。 选项 O _APPEND 指定为追加。原来的 UNIX 系统不支持追加，只能先使用 lseek() 先设置文件的偏移量到文件的 结尾，然后再写。但是这在多个进程同时写的时候会出问题，因为调用了两个函数来追加，所以不是一个原子操作。 而追加选项确保设置偏移和写操作为原子操作。
管道读写 写管道的时候不用使用追加选项，内核会自动按写的顺序写入管道。读取后自动将相应的内容从管道清除。 读取一个写端关闭的管道，在读取完全部数据后，read 函数返回 0 ； 写一个读端关闭的管道，产生 SIGPIPE 信号，设置该信号处理函数或者忽略该信号，write 返回 -1，且 errno 设置为 EPIPE。 读管道，如果管道为空，调用线程阻塞，同进程内的其他线程不受影响。
套接字描述符 虽然套接字描述符本质上是一个文件描述符，但不是所有参数为文件描述符的函数都可以接受套接字描述符。 套接字不支持文件偏移量概念，不能使用 lseek 函数，也不可以使用 mmap 函数，不可调用 fchdir 函数。
shutdown 函数可以直接关闭一个套接字的读端或者写端，不管该套接字描述符复制了多少分； close 函数只有在关闭最后一个套接字的时候才会释放该套接字。
改变文件偏移量 lseek
标准库 I/O 标准 I/O 库的操作围绕流(stream)进行。利用指向 FILE 对象维护，该结构体包含了标准 I/O 库为了维护该流所 需要的信息：文件描述符，指向缓冲区的指针，缓冲区的长度，缓冲区中当前的字符数，出错标志等。不需要关心 FILE 结构的具体形式。 相对于文件 I/O，标准库的 I/O 都是带缓冲的，标准库维护了一个缓冲区，在适当的时候才调用 read、write 函 数，从而减少系统调用的开销。</description>
    </item>
    
    <item>
      <title>C Traps and Pitfalls</title>
      <link>https://kylestones.github.io/blog/apue/c-traps-and-pitfalls/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kylestones.github.io/blog/apue/c-traps-and-pitfalls/</guid>
      <description>导读 程序严格按照我们写明的程序来执行，但结果却并不是我们真正希望得到的。 程序设计错误实际上反应的是程序与程序员的“心智模式”两者的相异之处。（心智模式(mental model)解释为人 们深植心中，对于周遭世界如何运作的看法和行为；《列子》中记录有疑邻盗斧）
练习 0-1 返修率高 你是否愿意购买一个返修率很高的厂商所生产的汽车？如果厂家声明它已经做出了改进，你的态度是否会改变？用 户为你找出程序中的 Bug，你真正损失的是什么？
答：我们经常会依据厂商的信誉去购买其商品；会考虑其最近的高质量是真实的还是偶然的；会损失信誉。而信誉 一旦失去，就很难重新获得。
0-2 修建一个 100 英尺长的护栏，护栏的栏杆之间相距 10 英尺，共需要多少根栏杆？ 答：11 根。
0-3 菜刀 在烹饪时你是否失手用菜刀切伤过自己的手？怎样改进菜刀使得使用更安全？你是否愿意使用这样一把经过改良的 菜刀？
答：我们很容易想到办法让一个工具更安全，代价是原来简单的工具现在要变得复杂一些。食品加工机一般有连锁 装置，保护使用者不让手指受伤。但是菜刀却不同，给这样一个简单、灵活的工具附加保护手指避免受伤的装置， 只能让其失去简单灵活的特点。实际上，这样做最后得到的也许更像一台食品加工机，而不是一把菜刀。 使其难于做“傻事”常常会使其难于做“聪明事”，正所谓“弄巧成拙”。
第 1 章 词法陷阱 从较低层面考虑，程序是由 符号(token) 序列组成的，将程序分解成符号的过程称为“词法分析” 术语符号指的是程序的一个基本组成单元，其作用相当于一个句子中的单词，在不同的句子中用于相同的意义；但 是组成符号的字符序列就不同，同一组字符序列在某个上下文环境中属于一个符号，而在另一个上下文环境中可能 属于完全不同的另一个符号。 编译器中负责将程序分解为一个一个符号的部分称为“词法分析器” 在 C 语言中，符号之间的空白（包括空格符、制表符或换行符）将被忽略，因此 C 语言书写的格式可以很随意， 但这并不是好习惯。
1.1 = is not == C 语言中赋值符号被作为一种操作符对待，因而重复进行赋值操作可以很容易的书写(a=b=c) 不要误用比较运算和赋值运算 比较运算时，如果有常量，将常量方在左侧 如果确实需要赋值运算，明确的表示出来，如下： if(x = y) foo(); //应写成 if (0 != (x = y)) foo(); 不要指望靠编译器来提醒这些警告消息，毕竟警告可以被忽略，而且有些编译器不支持 1.</description>
    </item>
    
  </channel>
</rss>
